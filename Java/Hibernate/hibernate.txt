What is cascade in hibernate ?
In the assoication, changes applied to owning entiy should also need to apply related mapped entity or not. 

CascadeType.PERSIST : cascade type presist means that save() or persist() operations cascade to related entities.
CascadeType.MERGE : cascade type merge means that related entities are merged when the owning entity is merged.
CascadeType.REFRESH : cascade type refresh does the same thing for the refresh() operation.
CascadeType.REMOVE : cascade type remove removes all related entities association with this setting when the owning entity is deleted.
CascadeType.DETACH : cascade type detach detaches all related entities if a “manual detach” occurs.
CascadeType.ALL : cascade type all is shorthand for all of the above cascade operations.

Note : There is no default cascade type in JPA. By default no operations are cascaded.

Hibernate cascade Types : orphanRemoval = true

explanation : 

@Entity
@Table(name = "Employee")
public class EmployeeEntity implements Serializable
{
    @OneToMany(cascade=CascadeType.ALL, fetch = FetchType.LAZY)
    @JoinColumn(name="EMPLOYEE_ID")
    private Set<AccountEntity> accounts;
 
    //Getters and Setters Ommited
}

It defines “cascade=CascadeType.ALL” and it essentially means that any change happened on EmployeeEntity must cascade to AccountEntity as well. 
If you save an employee, then all associated accounts will also be saved into database. 
If you delete an Employee then all accounts associated with that Employee also be deleted

@OneToMany(cascade=CascadeType.PERSIST, fetch = FetchType.LAZY)
@JoinColumn(name="EMPLOYEE_ID")
private Set<AccountEntity> accounts;
Now only when save() or persist() methods are called using employee instance then only accounts will be persisted.
If any other method is called on session, it will not affect cascade to accounts.

@OneToMany(orphanRemoval = true, mappedBy = "employee")
private Set<AccountEntity> accounts;
which means I am removing the relationship between that account and Employee); 
the account entity which is not associated with any other Employee on database (i.e. orphan) should also be deleted

We can also use multiple casecades
@OneToMany(cascade={CascadeType.REFRESH, CascadeType.MERGE}, fetch = FetchType.LAZY)
@JoinColumn(name="EMPLOYEE_ID")
private Set<AccountEntity> accounts;
------------------------------------------------------------------------------------------------------------------------
Column field properties
name : (Optional) The name of the column. Defaults to the property or field name.
unique : (Optional) Whether the column is a unique key (default false)
nullable : (Optional) Whether the database column is nullable. (default true)
insertable :(Optional) Whether the column is included in SQL INSERT tatements generated by the persistence provider. (default true)
updatable: (Optional) Whether the column is included in SQL UPDATE statements generated by the persistence provider.(default true)
columnDefinition : (Optional) The SQL fragment that is used when generating the DDL for the column. 
                  Defaults to the generated SQL to create a column of the inferred type. (default "")
table: (Optional) The name of the table that contains the column. If absent the column is assumed to be in the primary table. (default "")
length : (Optional) The column length. (Applies only if a string-valued column is used.) (default 255)
precision : (Optional) The precision for a decimal (exact numeric) column. (Applies only if a decimal column is used.) Value must be set by developer if used when generating the DDL for the column. (default 0)
     
@Column(name = "bad_login_attempts", nullable = false, 
	    columnDefinition = "int default 0", unique = true, insertable = true, updatable = true, length = 100, table = "emp")
	private Integer badLoginAttempts = 0;
------------------------------------------------------------------------------------------------------------------------
@OneToMany(cascade = CascadeType.ALL, mappedBy = "uploader")
	@OnDelete(action = OnDeleteAction.CASCADE)  (default is NO_ACTION i.e @OnDelete(action = OnDeleteAction.NO_ACTION))
	private List<TimeExchange> exchanges = new ArrayList<TimeExchange>();

ON DELETE CASCADE is a database-specific thing, it deletes the "child" row in the database when the "parent" row is deleted.

orphanRemoval vs CASCADE.REMOVE vs @OnDelete
-orphanRemoval = true: "Child" entity is removed when it's no longer referenced (its parent may not be removed). 
- CascadeType.REMOVE: "Child" entity is removed only when its "Parent" is removed.
- ON DELETE CASCADE is a database-specific thing, it deletes the "child" row in the database when the "parent" row is deleted.

